import React, { useEffect, useRef, useState } from 'react'; import { io } from 'socket.io-client'; export default function App(){ const [socket,setSocket]=useState(null); const [connected,setConnected]=useState(false); const [players,setPlayers]=useState([]); const [game,setGame]=useState(null); const [room,setRoom]=useState(''); const [name,setName]=useState('Player'); const [serverUrl,setServerUrl]=useState(''); const canvasRef=useRef(null); const [selected,setSelected]=useState(null); const myIdRef=useRef(null); useEffect(()=>{ const url=serverUrl.trim()||window.location.origin; const s=io(url,{transports:['websocket']}); setSocket(s); s.on('connect',()=>{ myIdRef.current=s.id; setConnected(true)}); s.on('disconnect',()=>setConnected(false)); s.on('roomCreated',d=>setRoom(d.roomId)); s.on('joined',d=>{ myIdRef.current=d.playerId; setRoom(d.roomId); setPlayers(d.players)}); s.on('playerList',pl=>setPlayers(pl)); s.on('gameState',g=>setGame(g)); s.on('errorMsg',m=>alert(m)); return ()=>s.disconnect(); },[serverUrl]); useEffect(()=>{ const canvas=canvasRef.current; if(!canvas||!game) return; const ctx=canvas.getContext('2d'); const rect=canvas.getBoundingClientRect(); canvas.width=rect.width*devicePixelRatio; canvas.height=rect.height*devicePixelRatio; ctx.setTransform(devicePixelRatio,0,0,devicePixelRatio,0,0); const cols=game.grid[0].length, rows=game.grid.length; const w=rect.width/cols, h=rect.height/rows; ctx.clearRect(0,0,rect.width,rect.height); for(let y=0;y<rows;y++) for(let x=0;x<cols;x++){ const cell=game.grid[y][x]; const px=x*w, py=y*h; if(cell.owner){ const p=game.players.find(p=>p.id===cell.owner); ctx.fillStyle=(p&&p.color)?(p.color+'88'):'rgba(180,180,180,0.2)'; ctx.fillRect(px,py,w,h);} ctx.strokeStyle='#00000022'; ctx.strokeRect(px+0.5,py+0.5,w-1,h-1); if(selected&&selected.x===x&&selected.y===y){ ctx.strokeStyle='#ffb86b'; ctx.lineWidth=3; ctx.strokeRect(px+4,py+4,w-8,h-8); ctx.lineWidth=1;} ctx.fillStyle='#051010'; ctx.font=Math.max(12,Math.min(h/3,20))+'px sans-serif'; ctx.fillText(cell.dice,px+8,py+8); } },[game,selected]); function createRoom(){ if(!socket) return alert('Not connected'); socket.emit('createRoom'); } function joinRoom(){ if(!socket) return alert('Not connected'); if(!room) return alert('Enter room code'); socket.emit('joinRoom',{roomId:room,name}); } function startGame(){ socket.emit('startGame',{roomId:room}); } function endTurn(){ socket.emit('endTurn',{roomId:room}); } function attack(from,to){ socket.emit('attack',{roomId:room,from,to}); } function handleCanvasClick(e){ if(!game) return; const rect=canvasRef.current.getBoundingClientRect(); const cols=game.grid[0].length, rows=game.grid.length; const x=Math.floor((e.clientX-rect.left)/(rect.width/cols)); const y=Math.floor((e.clientY-rect.top)/(rect.height/rows)); if(!selected) setSelected({x,y}); else{ if(selected.x===x&&selected.y===y) setSelected(null); else{ attack(selected,{x,y}); setSelected(null);} } } return (<div style={{padding:20,maxWidth:900,margin:'0 auto',color:'#eaeaea',fontFamily:'Inter,system-ui'}}> <header style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}> <h2>Dice Wars</h2> <div style={{fontSize:12,color:'#9aa4b2'}}>{connected ? 'Connected' : 'Disconnected'}</div> </header> <section style={{display:'flex',gap:8, marginTop:12}}> <input placeholder='Server URL (leave blank = same host)' value={serverUrl} onChange={e=>setServerUrl(e.target.value)} style={{flex:1,padding:8,borderRadius:8}} /> <input placeholder='Your name' value={name} onChange={e=>setName(e.target.value)} style={{width:140,padding:8,borderRadius:8}} /> </section> <section style={{display:'flex',gap:8, marginTop:8}}> <input placeholder='Room code' value={room} onChange={e=>setRoom(e.target.value.toUpperCase())} style={{padding:8,borderRadius:8}} /> <button onClick={createRoom} style={{padding:'8px 12px', background:'#ffb86b', border:0}}>Create</button> <button onClick={joinRoom} style={{padding:'8px 12px'}}>Join</button> <button onClick={startGame} style={{padding:'8px 12px'}}>Start</button> </section> <section style={{display:'flex',gap:12, marginTop:12}}> <div style={{flex:1}}> <div style={{background:'#0b1220', padding:10, borderRadius:12}}> <div style={{display:'flex',justifyContent:'space-between'}}> <div>Players</div> <div style={{fontSize:12,color:'#9aa4b2'}}>Turn: {game?.players?.[game?.turnIndex]?.name || 'â€”'}</div> </div> <div style={{display:'flex',gap:8,flexWrap:'wrap', marginTop:8}}> {players.map(p=> <div key={p.id} style={{background:p.color||'#222', padding:'6px 8px', borderRadius:8}}>{p.id===myIdRef.current ? p.name+' (you)' : p.name}</div>)} </div> <div style={{marginTop:10}}> <button onClick={endTurn} style={{padding:'8px 12px', marginRight:8}}>End Turn</button> </div> </div> </div> <div style={{width:'60%', minWidth:300}}> <div style={{background:'#f7f7f7', borderRadius:10, overflow:'hidden'}}> <div style={{aspectRatio:'4/3', position:'relative'}}> <canvas ref={canvasRef} style={{width:'100%', height:'100%'}} onClick={handleCanvasClick}></canvas> </div> </div> </div> </section> </div>); }